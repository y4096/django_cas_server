#!/usr/bin/env bash

project={project}
ver=$1
ver=${{ver:-"0.0.1"}}
echo "will deploy ver: $ver"
echo "1.prod  2.stage"
read -r -p "select environment: " env
case $env in
  1)
    env=prod;;
  2)
    env=stage;;
  *)
    echo "error input"
    exit
esac

sudo docker build . -t tbgd/${{project}}_${{env}}:${{ver}}
#sudo docker push tbgd/${{project}}_${{env}}:${{ver}}
#sudo docker pull tbgd/${{project}}_${{env}}:${{ver}}
sudo docker stop ${{project}}_${{env}} 2>/dev/null
sudo docker rm -f ${{project}}_${{env}} 2>/dev/null
echo "remove old image"
sudo docker images|grep '<none>'|cut -c 55-67|xargs docker rmi

sudo docker run -itd --name ${{project}}_${{env}} --net host --env site_env=${{env}} \
  -v /data/${{project}}_docker_shard/${{env}}/assets:/data/${{project}}/assets \
  -v /data/${{project}}_docker_shard/${{env}}/logs:/data/${{project}}/logs \
  -v /data/${{project}}_docker_shard/${{env}}/prometheus:/data/${{project}}/prometheus \
  --restart always tbgd/"${{project}}_${{env}}:${{ver}}"

echo "copy nginx files and generate cert command:"
echo -e "\033[46;37m\
sudo cp config/{project}_stage.conf /etc/nginx/conf.d/ && \
sudo cp config/{project}_prod.conf /etc/nginx/conf.d/ && \
sudo certbot certonly --standalone -n --duplicate -m vpsadmin@toolsforest.com \
-d {stage_domain} -d {prod_domain} --agree-tos && \
sudo nginx -s reload\
\033[0m"